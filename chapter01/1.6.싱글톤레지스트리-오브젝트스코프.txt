
DaoFactory를 사용하는 것과, 스프링 컨테이너를 사용하는 방식의 차이는 무엇인가?
(서로 그렇게 큰 차이가 없어보이는데..?)

* 오브젝트의 동일성과 동등성

  동일성(identity): 두 오브젝트가 서로 완전히 같음 (==)
                  한 개의 오브젝트가 메모리에 잡혀있고, 두 레퍼런스 변수를 가지고 있는 상태
  동등성(equality): 두 오브젝트가 서로 동일한 정보를 담고 있음 (.equals())
                  두 개의 오브젝트가 서로 다른 메모리 영역에 잡혀있음

  equals 메서드는 Object 클래스에 구현되어 있음. 
  이를 오버라이딩하여, 세부 구현을 변경할 수 있다.


두 오브젝트의 userDao() 메소드를 두 번 호출하여 출력하면 어떻게 되는지 확인해보자.

====================================================================================
DaoFactory factory = new DaoFactory();
UserDao dao1 = factory.userDao();
UserDao dao2 = factory.userDao();

System.out.println(dao1);
System.out.println(dao2);
====================================================================================

springtest.dao.UserDao@118f375
springtest.dao.UserDao@117a8bd

출력 결과에서 확인할 수 있는 것: 각기 다른 값을 가진 동일하지 않은 오브젝트
매번 호출하면 새로운 오브젝트가 만들어질 것


====================================================================================
ApplicationContext context = new 
        AnnotationConfigApplicationContext(DaoFactory.class);

UserDao dao3 = context.getBean("userDao", UserDao.class);
UserDao dao4 = context.getBean("userDao", UserDao.class);

System.out.println(dao3);
System.out.println(dao4);
====================================================================================

springtest.dao.UserDao@ee22f7
springtest.dao.UserDao@ee22f7

스프링 컨테이너의 결과는 다름, 두 오브젝트가 서로 동일함 (dao3 == dao4)

* 이를 통해 알 수 있는 것: DaoFactory와 스프링 컨테이너의 작동방식이 다름
그렇다면 스프링 컨테이너는 왜 이런 방식으로 작동하는 것일까?

## 1.6.1. 싱글톤 레지스트리로서의 애플리케이션 컨텍스트
