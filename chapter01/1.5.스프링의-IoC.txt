
스프링의 핵심 
-> 빈 팩토리 
-> 애플리케이션 컨텍스트

## 1.5.1. 오브젝트 팩토리를 이용한 스프링 IoC
### 어플리케이션 컨텍스트와 설정정보

* 빈(BEAN) 
--> 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트 단위의 애플리케이션 컴포넌트
--> 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 IoC가 적용된 오브젝트

* 빈 팩토리(Bean Factory): 빈 생성, 관계설정 등의 제어를 담당하는 IoC 오브젝트
(보통은 빈 팩토리보다는 이를 좀 더 확장한 애플리케이션 컨텍스트를 사용) 

* 애플리케이션 컨텍스트(Application Context): IoC 방식으로 만들어진 빈 팩토리
(빈 팩토리 == 애플리케이션 컨텍스트)

빈 팩토리(IoC 기본에 초점) ---- 애플리케이션 컨텍스트(IoC 엔진)

설정정보 --> 애플리케이션 컨텍스트 --> 컴포넌트 구성 및 생성 


### DaoFactory를 사용하는 애플리케이션 컨텍스트

@Configuration 
--> 스프링이 빈 팩토리를 위한 오브젝트 설정을 담당하는 클래스임을 인식하는 어노테이션

@Bean
--> 빈 오브젝트를 만들어주는 메소드임을 인식하는 어노테이션

이러한 설정 정보는 비단 클래스 뿐만 아니라 XML로도 설정할 수 있다.
여기서는 클래스의 탈을 쓴 XML이라고 보아도 무방할 것이다.

====================================================================================
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
...

@Configuration      // 애플리케이션 컨텍스트 또는 빈 팩토리가 사용할 설정정보라는 표시
public class DaoFactory {
    @Bean       // 오브젝트 생성을 담당하는 IoC용 메소드라는 표시
    public UserDao userDao() {
        return new UserDao(connectionMaker());
    }

    @Bean
    public ConnectionMaker connectionMaker() {
        return new DConnectionMaker();
    }
}
====================================================================================