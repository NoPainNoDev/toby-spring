
스프링의 핵심 
-> 빈 팩토리 
-> 애플리케이션 컨텍스트

## 1.5.1. 오브젝트 팩토리를 이용한 스프링 IoC
### 어플리케이션 컨텍스트와 설정정보

* 빈(BEAN) 
--> 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트 단위의 애플리케이션 컴포넌트
--> 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 IoC가 적용된 오브젝트

* 빈 팩토리(Bean Factory): 빈 생성, 관계설정 등의 제어를 담당하는 IoC 오브젝트
(보통은 빈 팩토리보다는 이를 좀 더 확장한 애플리케이션 컨텍스트를 사용) 

* 애플리케이션 컨텍스트(Application Context): IoC 방식으로 만들어진 빈 팩토리
(빈 팩토리 == 애플리케이션 컨텍스트)

빈 팩토리(IoC 기본에 초점) ---- 애플리케이션 컨텍스트(IoC 엔진)

설정정보 --> 애플리케이션 컨텍스트 --> 컴포넌트 구성 및 생성 


### DaoFactory를 사용하는 애플리케이션 컨텍스트

@Configuration 
--> 스프링이 빈 팩토리를 위한 오브젝트 설정을 담당하는 클래스임을 인식하는 어노테이션

@Bean
--> 빈 오브젝트를 만들어주는 메소드임을 인식하는 어노테이션

이러한 설정 정보는 비단 클래스 뿐만 아니라 XML로도 설정할 수 있다.
여기서는 클래스의 탈을 쓴 XML이라고 보아도 무방할 것이다.

====================================================================================
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
...

@Configuration      // 애플리케이션 컨텍스트 또는 빈 팩토리가 사용할 설정정보라는 표시
public class DaoFactory {
    @Bean       // 오브젝트 생성을 담당하는 IoC용 메소드라는 표시
    public UserDao userDao() {
        return new UserDao(connectionMaker());
    }

    @Bean
    public ConnectionMaker connectionMaker() {
        return new DConnectionMaker();
    }
}
====================================================================================

애플리케이션 컨텍스트 ApplicationContext 타입의 오브젝트이다.
이를 구현한 클래스는 여러가지가 있는데 DaoFactory 처럼 @Configuration이 붙은 자바 코드를 사용하려면
AnnotationConfigApplicationContext를 이용하면 된다.
준비된 ApplicationContext의 getBean() 메소드를 이용하면 UserDao를 가져올 수 있다.

====================================================================================
public class UserDaoTest {
    public static void main(String[] args) throws ClassNotFoundException, SQLException {
        ApplicationContext context = 
            new AnnotationConfigApplicationContext(DaoFactory.class); // 빈 팩토리 생성
        UserDao dao = context.getBean("userDao", UserDao.class);   // Dao 컴포넌트를 가져옴
        ...
    }
}
====================================================================================

getBean()에서 파라미터로 사용된 "userDao"는 ApplicationContext가 관리하는 오브젝트를 요청하는 메소드이다.
Dao를 가져오는 메소드 이름을 myPreciousUserDao() 라고 했다면 해당 파라미터를 넣어주면 가져올 수 있다.

UserDao를 가져오는 메소드는 하나뿐인데 왜 굳이 이름을 사용할까? 
그 이유는 UserDao를 다른 방식으로 가져오는 메소드가 추가 될 수 있기 때문이다.
specialUserDao 메소드를 만들었다면 해당 메소드 이름으로 특정 빈을 가져올 수 있다.

getBean() 은 Object 타입으로 리턴하게 되어있어 다시 캐스팅 해줘야하는 부담이 있다.
제네릭(Generic) 메소드 방식을 사용해 두번째 파라미터에 리턴 타입을 주면, 캐스팅 코드를 사용할 필요가 없다.

추가할 라이브러리
------------------------------------------------------------------------------------
com.springsource.net.sf.cglib-*.jar
com.springsource.org.apache.commons.logging-*.jar
org.springframework.asm-*.RELEASE.jar
org.springframework.beans-*.RELEASE.jar
org.springframework.context-*.RELEASE.jar
org.springframework.core-*.RELEASE.jar
org.springframework.expression-*.RELEASE.jar
------------------------------------------------------------------------------------

앞서 살펴본 DaoFactory를 직접 사용하는 것보다 작업이 번거로워졌다. 이렇게 해서 얻는 이점이 무엇일까?
스프링을 통해 DaoFactory를 IoC를 적용하여 얻을 수 있는 이점은 매우 크다. 이제부터 살펴보자.

## 1.5.2 애플리케이션 컨텍스트의 동작방식
오브젝트 팩토리
(스프링 --> IoC 컨테이너 or 스프링 컨테이너 or 빈 팩토리)

* 상속구조 
BeanFactory ---> ApplicationContext

애플리케이션 컨택스트가 스프링의 가장 대표적인 오브젝트이므로, 그냥 스프링 그 자체라고 부르는 개발자도 있다.

DaoFactory와 같은 제한적인 기능에 반해, 애플리케이션 컨텍스트는 IoC를 적용하여 관리할 모든 오브젝트에 대한 생성과 관계설정을 담당한다. 
대신 DaoFactory와 달리 직접 오브젝트를 생성해 관계를 맺어주는 코드가 없고, 그런 정보들은 별도의 설정정보를 통해 얻는다.

'userDao' 요청 ---getBean()---> ApplicationContext  ---생성요청--->  @Configuration DaoFactory ---생성---> UserDao
                            [Bean List : 'userDao'] <---등록---        @Bean userDao()

애플리케이션 컨텍스트를 사용하는 이유? 
--> 범용적이고 유연한 방법으로 IoC 기능을 확장하기 위함

* 애플리에이션 컨텍스트를 이용했을때 장점
1. 클라이언트는 구체적인 팩토리 클래스를 알 필요가 없다.
클라이언트가 필요한 오브젝트를 가져오기 위해 어떤 팩토리 클래스를 사용해야 하는지 알 필요가 없다.
오브젝트 팩토리가 아무리 많아져도 이를 알아야하거나 직접 사용할 필요가 없다.
일관된 방식으로 원하는 오브젝트를 가지고 올 수 있다.

2. 애플리케이션 컨텍스트는 종합 IoC 서비스를 제공해준다.
오브젝트의 생성 및 관계 설정 뿐만 아니라, 오브젝트를 효과적으로 활용할 수 있는 다양한 기능들을 제공한다.
- 만들어지는 방식, 시점과 전략을 다르게 가져갈 수 있다.
- 자동생성, 오브젝트 후처리, 정보 조합, 설정방식의 다변화, 인터셉팅 등
- 기반기술 및 외부 시스템과의 연동 등 제공

3. 애플리케이션 컨텍스트는 빈을 검색하는 다양한 방법을 제공한다.
빈의 이름 뿐만 아니라 타입만으로도 빈을 검색하거나 특별한 어노테이션 설정이 된 빈을 찾을 수도 있다.


## 1.5.3 스프링 IoC의 용어 정리

* 빈(Bean)
스프링이 IoC 방식으로 관리하는 오브젝트를 가리킴
관리되는 오브젝트(Managed object)라고 부르기도 함 
(하지만, 스프링에서 만드는 모든 오브젝트가 빈은 절대 아님)
스프링이 직접 생성 및 제어를 담당하는 오브젝트만을 빈이라고 부름

* 빈 팩토리(Bean Factory)
스프링에서 IoC를 담당하는 컨테이너를 뜻함
빈 등록, 빈 생성, 빈 조회후 반환, 부가적인 빈 관리 담당
(보통은 이를 확장한 애플리케이션 컨텍스트를 이용)
BeanFactory를 인터페이스로 구성하고 있으며, getBean() 메소드가 위치함

* 애플리케이션 컨텍스트(Application Context)
빈 팩토리를 확장한 IoC 컨테이너
기본적인 기능은 빈 팩토리와 동일(+ 각종 부가 서비스를 추가 제공)
애플리케이션 컨텍스트 = 빈 팩토리 기능(빈관리) + 애플리케이션 지원 기능
ApplicationContext를 인터페이스로 구성하며 BeanFactory를 상속함 

* 설정정보/설정 메타정보 (Configuration metadata)
Application Context 및 Bean Factory가 IoC를 적용하기 위해 사용하는 정보
값을 세팅 및 조정하는 경우에도 사용되지만, 보통 IoC 컨테이너로 관리되는 오브젝트를 생성 및 구성할때 주로 사용 
애플리케이션의 전체 그림이 그려진 청사진(Blueprints)라고 부르기도 함

* 컨테이너 또는 IoC 컨테이너
IoC 방식으로 빈을 관리하는 의미에서 Application Context와 Bean Factory를 IoC 컨테이너라고도 함
IoC 컨테이너는 주로 Bean Factory 관점에서 의미를 부여
컨테이너 및 스프링 컨테이너는 Application Context를 가리킨다고 봐도 무방
스프링 자체를 스프링 컨테이너라고도 흔히 말함, IoC 컨테이너에 비해 좀 더 포괄적인 의미가 내포

* 스프링 프레임워크 
IoC 컨테이너, 애플리케이션 컨텍스트를 포함해 스프링이 제공하는 모든 기능을 통틀어 말할때 주로 사용
줄여서 스프링이라고도 함


