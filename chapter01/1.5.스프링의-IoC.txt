
스프링의 핵심 
-> 빈 팩토리 
-> 애플리케이션 컨텍스트

## 1.5.1. 오브젝트 팩토리를 이용한 스프링 IoC
### 어플리케이션 컨텍스트와 설정정보

* 빈(BEAN) 
--> 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트 단위의 애플리케이션 컴포넌트
--> 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 IoC가 적용된 오브젝트

* 빈 팩토리(Bean Factory): 빈 생성, 관계설정 등의 제어를 담당하는 IoC 오브젝트
(보통은 빈 팩토리보다는 이를 좀 더 확장한 애플리케이션 컨텍스트를 사용) 

* 애플리케이션 컨텍스트(Application Context): IoC 방식으로 만들어진 빈 팩토리
(빈 팩토리 == 애플리케이션 컨텍스트)

빈 팩토리(IoC 기본에 초점) ---- 애플리케이션 컨텍스트(IoC 엔진)

설정정보 --> 애플리케이션 컨텍스트 --> 컴포넌트 구성 및 생성 


### DaoFactory를 사용하는 애플리케이션 컨텍스트

@Configuration 
--> 스프링이 빈 팩토리를 위한 오브젝트 설정을 담당하는 클래스임을 인식하는 어노테이션

@Bean
--> 빈 오브젝트를 만들어주는 메소드임을 인식하는 어노테이션

이러한 설정 정보는 비단 클래스 뿐만 아니라 XML로도 설정할 수 있다.
여기서는 클래스의 탈을 쓴 XML이라고 보아도 무방할 것이다.

====================================================================================
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
...

@Configuration      // 애플리케이션 컨텍스트 또는 빈 팩토리가 사용할 설정정보라는 표시
public class DaoFactory {
    @Bean       // 오브젝트 생성을 담당하는 IoC용 메소드라는 표시
    public UserDao userDao() {
        return new UserDao(connectionMaker());
    }

    @Bean
    public ConnectionMaker connectionMaker() {
        return new DConnectionMaker();
    }
}
====================================================================================

애플리케이션 컨텍스트 ApplicationContext 타입의 오브젝트이다.
이를 구현한 클래스는 여러가지가 있는데 DaoFactory 처럼 @Configuration이 붙은 자바 코드를 사용하려면
AnnotationConfigApplicationContext를 이용하면 된다.
준비된 ApplicationContext의 getBean() 메소드를 이용하면 UserDao를 가져올 수 있다.

====================================================================================
public class UserDaoTest {
    public static void main(String[] args) throws ClassNotFoundException, SQLException {
        ApplicationContext context = 
            new AnnotationConfigApplicationContext(DaoFactory.class); // 빈 팩토리 생성
        UserDao dao = context.getBean("userDao", UserDao.class);   // Dao 컴포넌트를 가져옴
        ...
    }
}
====================================================================================

getBean()에서 파라미터로 사용된 "userDao"는 ApplicationContext가 관리하는 오브젝트를 요청하는 메소드이다.
Dao를 가져오는 메소드 이름을 myPreciousUserDao() 라고 했다면 해당 파라미터를 넣어주면 가져올 수 있다.

UserDao를 가져오는 메소드는 하나뿐인데 왜 굳이 이름을 사용할까? 
그 이유는 UserDao를 다른 방식으로 가져오는 메소드가 추가 될 수 있기 때문이다.
specialUserDao 메소드를 만들었다면 해당 메소드 이름으로 특정 빈을 가져올 수 있다.

getBean() 은 Object 타입으로 리턴하게 되어있어 다시 캐스팅 해줘야하는 부담이 있다.
제네릭(Generic) 메소드 방식을 사용해 두번째 파라미터에 리턴 타입을 주면, 캐스팅 코드를 사용할 필요가 없다.

추가할 라이브러리
------------------------------------------------------------------------------------
com.springsource.net.sf.cglib-*.jar
com.springsource.org.apache.commons.logging-*.jar
org.springframework.asm-*.RELEASE.jar
org.springframework.beans-*.RELEASE.jar
org.springframework.context-*.RELEASE.jar
org.springframework.core-*.RELEASE.jar
org.springframework.expression-*.RELEASE.jar
------------------------------------------------------------------------------------

앞서 살펴본 DaoFactory를 직접 사용하는 것보다 작업이 번거로워졌다. 이렇게 해서 얻는 이점이 무엇일까?
스프링을 통해 DaoFactory를 IoC를 적용하여 얻을 수 있는 이점은 매우 크다. 이제부터 살펴보자.

## 1.5.2 애플리케이션 컨텍스트의 동작방식
